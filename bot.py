import os
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters, ConversationHandler
from functools import wraps
from sheets_handler import GoogleSheetsHandler

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
sheets_handler = GoogleSheetsHandler(
    credentials_path='credentials.json',
    spreadsheet_id=os.getenv('SPREADSHEET_ID')
)

REGISTERING = 1
ADDING_LEAD = 2
LEAD_INFO = 3
LEAD_PHONE = 4
LEAD_PARENT = 5
LEAD_PARENT_PHONE = 6
LEAD_PARENT_PHONE2 = 7
BROADCAST_TEXT = 8
BROADCAST_CONFIRM = 9

ADMIN_IDS = [641057657, 6466769330]

def admin_only(func):
    """Decorator to restrict access to admin commands."""
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        return await func(update, context, *args, **kwargs)
    return wrapped

def get_all_chat_ids():
    """Fetches all non-null chat_ids from the participants table."""
    participants = sheets_handler.get_all_participants()
    chat_ids = [p['chat_id'] for p in participants if p['chat_id']]
    return chat_ids

def get_main_keyboard():
    """Create main menu keyboard."""
    keyboard = [
        [KeyboardButton("‚ÑπÔ∏è –û –∫–æ–Ω–∫—É—Ä—Å–µ"), KeyboardButton("üë§ –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–∏–¥–∞"), KeyboardButton("üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_contact_keyboard():
    """Create keyboard with contact button."""
    keyboard = [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def show_registration_prompt(update: Update):
    """Sends the registration prompt."""
    welcome_text = (
        "| /start |\n\n"
        "–í–Ω–∏–º–∞–Ω–∏–µ! –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç IT-–∫–æ–ª–ª–µ–¥–∂–∞!\n"
        "–Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∑–∞–ø–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ\n\n"
        "–¢–µ–ø–µ—Ä—å –æ –ø—Ä–∞–≤–∏–ª–∞—Ö —É—á–∞—Å—Ç–∏—è:\n\n"
        "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
    )
    keyboard = [[InlineKeyboardButton("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ ‚Äî –º–µ–Ω—é, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è."""
    telegram_id = update.effective_user.id

    participant = sheets_handler.find_participant_by_telegram_id(telegram_id)

    if participant:
        if not participant['chat_id']:
            sheets_handler.update_participant_chat_id(telegram_id, update.effective_chat.id)
        await update.message.reply_text(
            "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=get_main_keyboard()
        )
    else:
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º Google-—Ç–∞–±–ª–∏—Ü—É (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        in_sheet = False
        try:
            row = sheets_handler.find_participant_by_telegram_id(telegram_id)
            if row:
                in_sheet = True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google Sheets: {e}")
            in_sheet = False
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –≤ –±–∞–∑–µ, –Ω–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        await show_registration_prompt(update)

async def register_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å:\n"
        "1. –§–ò–û\n"
        "2. –ö—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è (1-4)\n\n"
        "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞‚úÖ:\n"
        "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n"
        "1"
    )
    return REGISTERING

async def process_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        full_name, course = update.message.text.split('\n')
        course = int(course)
        
        if not (1 <= course <= 4):
            await update.message.reply_text(
                "‚ùå –ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
                "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞‚úÖ:\n"
                "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n"
                "1"
            )
            return REGISTERING
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID –∏–∑ Google-—Ç–∞–±–ª–∏—Ü—ã
        max_sheet_id = sheets_handler.get_max_id()
        new_id = max(max_sheet_id, 1) + 1

        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ Google —Ç–∞–±–ª–∏—Ü—É
        try:
            sheets_handler.add_participant(new_id, full_name, course, update.effective_chat.id, update.effective_user.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ –≤ Google Sheets: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ Google-—Ç–∞–±–ª–∏—Ü—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
            )
            return ConversationHandler.END
        
        await update.message.reply_text(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞‚úÖ:\n"
            "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n"
            "1"
        )
        return REGISTERING

async def add_lead(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = sheets_handler.find_participant_by_telegram_id(update.effective_user.id)
    
    if not user:
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"
        )
        return ConversationHandler.END
    
    keyboard = [
        [
            InlineKeyboardButton("4-8 –∫–ª–∞—Å—Å (–ö—ç–º–ø/–î–û)", callback_data="lead_camp_do"),
            InlineKeyboardButton("9 –∫–ª–∞—Å—Å (–ö–æ–ª–ª–µ–¥–∂)", callback_data="lead_college")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ª–∏–¥–∞:\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel",
        reply_markup=reply_markup
    )
    return ADDING_LEAD

async def lead_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    context.user_data['lead_type'] = query.data
    
    await query.edit_message_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "–§–ò–û —É—á–µ–Ω–∏–∫–∞\n"
        "–í–æ–∑—Ä–∞—Å—Ç (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)\n"
        "–ö–ª–∞—Å—Å (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)\n\n"
        "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞‚úÖ:\n"
        "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n"
        "14\n"
        "8\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel"
    )
    return LEAD_INFO

async def process_lead_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        info = update.message.text.split('\n')
        if len(info) != 3:
            raise ValueError
        
        full_name, age, grade = info
        age = int(age)
        grade = int(grade)
        
        if not (4 <= grade <= 9):
            await update.message.reply_text(
                "‚ùå –ö–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 4 –¥–æ 9. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
                "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞‚úÖ:\n"
                "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n"
                "14\n"
                "8"
            )
            return LEAD_INFO
        
        context.user_data['lead_full_name'] = full_name
        context.user_data['lead_age'] = age
        context.user_data['lead_grade'] = grade
        
        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ username —É—á–µ–Ω–∏–∫–∞ –≤ Telegram (–±–µ–∑ @):\n\n"
            "–ï—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç'\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel"
        )
        return LEAD_PHONE
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞‚úÖ:\n"
            "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n"
            "14\n"
            "8"
        )
        return LEAD_INFO

async def process_lead_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.text.strip()
    
    if username.lower() == '–Ω–µ—Ç':
        username = "–ù–µ —É–∫–∞–∑–∞–Ω"
    elif not username.startswith('@'):
        username = '@' + username
    
    context.user_data['lead_telegram'] = username
    
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—á–µ–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "+7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel"
    )
    return LEAD_PARENT

async def process_lead_parent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    if not (phone.startswith('+7') or phone.startswith('8')):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "+7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel"
        )
        return LEAD_PARENT

    digits_only = ''.join(filter(str.isdigit, phone))
    if len(digits_only) != 11:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "+7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel"
        )
        return LEAD_PARENT

    context.user_data['lead_phone'] = phone
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è:\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel"
    )
    return LEAD_PARENT_PHONE

async def process_lead_parent_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    parent_name = update.message.text.strip()
    context.user_data['lead_parent'] = parent_name
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n+7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel"
    )
    return LEAD_PARENT_PHONE2  # –ù–æ–≤—ã–π —à–∞–≥ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è

async def process_lead_parent_phone2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        parent_phone = update.message.text.strip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not (parent_phone.startswith('+7') or parent_phone.startswith('8')):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "+7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX\n\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel"
            )
            return LEAD_PARENT_PHONE2
        digits_only = ''.join(filter(str.isdigit, parent_phone))
        if len(digits_only) != 11:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "+7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX\n\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel"
            )
            return LEAD_PARENT_PHONE2
        if parent_phone.startswith('8'):
            parent_phone = '+7' + parent_phone[1:]
        user = sheets_handler.find_participant_by_telegram_id(update.effective_user.id)
        
        if user and (len(user) > 16 and not user[16]):
            sheets_handler.update_participant_chat_id(update.effective_user.id, update.effective_chat.id)
        
        if not user:
             await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.")
             return ConversationHandler.END

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ª–∏–¥–∞
        lead_data = {
            'child_name': context.user_data['lead_full_name'],
            'age': context.user_data['lead_age'],
            'grade': context.user_data['lead_grade'],
            'telegram': context.user_data['lead_telegram'],
            'phone': context.user_data['lead_phone'],
            'parent_name': context.user_data['lead_parent'],
            'parent_phone': parent_phone,
            'program_type': context.user_data['lead_type']
        }
        sheets_handler.add_lead(user[1], lead_data)
        await update.message.reply_text(
            "‚úÖ –õ–∏–¥ –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ë–∞–ª–ª—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in process_lead_parent_phone2: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show competition rules."""
    rules_text = (
        "üìã –ü—Ä–∞–≤–∏–ª–∞ —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ:\n\n"
        "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫\n"
        "2. –ü—Ä–∏–≤–æ–¥–∏ –Ω–æ–≤—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤\n"
        "3. –ü–æ–ª—É—á–∞–π –±–∞–ª–ª—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞:\n"
        "   ‚Ä¢ 5 –±–∞–ª–ª–æ–≤ –∑–∞ —É—á–µ–Ω–∏–∫–∞ 4-8 –∫–ª–∞—Å—Å–∞ (–ö—ç–º–ø/–î–û)\n"
        "   ‚Ä¢ 10 –±–∞–ª–ª–æ–≤ –∑–∞ —É—á–µ–Ω–∏–∫–∞ 9 –∫–ª–∞—Å—Å–∞ (–ö–æ–ª–ª–µ–¥–∂)\n"
        "4. –°–ª–µ–¥–∏ –∑–∞ —Å–≤–æ–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º\n"
        "5. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è"
    )
    await update.message.reply_text(rules_text)

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show information about Singularity programs."""
    keyboard = [
        [
            InlineKeyboardButton("–ö—É—Ä—Å—ã", callback_data="info_courses"),
            InlineKeyboardButton("–õ–∞–≥–µ—Ä—å", callback_data="info_camp")
        ],
        [
            InlineKeyboardButton("–ö–æ–ª–ª–µ–¥–∂-—à–∫–æ–ª–∞", callback_data="info_college"),
            InlineKeyboardButton("–ü—Ä–∏–µ–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è", callback_data="info_admission")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=reply_markup
    )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–∞."""
    user_id = update.effective_user.id
    
    sheet_user_row = sheets_handler.find_participant_by_telegram_id(user_id)
    
    if not sheet_user_row:
        await update.message.reply_text(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return ConversationHandler.END
        
    full_name = sheet_user_row[2]
    course = sheet_user_row[3]

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–ª—ã –∏–∑ Google Sheets
    points = sheets_handler.get_participant_points(sheet_user_row[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–∏–¥—ã –∏–∑ Google Sheets
    leads = sheets_handler.get_all_leads(sheet_user_row[1])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üë§ –§–ò–û: {full_name}\n"
        f"üéì –ö—É—Ä—Å: {course}\n"
        f"‚≠êÔ∏è –ë–∞–ª–ª—ã: {points}\n\n"
        f"üë• –í–∞—à–∏ –ª–∏–¥—ã:\n\n"
    )
    
    if leads:
        for lead in leads:
            message += f"{lead['child_name']}\n"
    else:
        message += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–æ–≤"
    
    await update.message.reply_text(message)
    return ConversationHandler.END

async def info_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    info = PROGRAM_INFO[query.data]
    await query.edit_message_text(
        f"{info['title']}\n\n{info['text']}"
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_main_keyboard()
    )
    context.user_data.clear()
    return ConversationHandler.END

# --- Admin Panel & Broadcast Functions ---

@admin_only
async def root(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Admin panel entry point."""
    keyboard = [[InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_broadcast")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)

async def start_broadcast_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Asks for the broadcast message text."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    return BROADCAST_TEXT

async def get_broadcast_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Shows a preview of the broadcast message."""
    broadcast_text = update.message.text
    context.user_data['broadcast_text'] = broadcast_text

    # Show preview
    await update.message.reply_text("<b>–ü—Ä–∏–º–µ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>", parse_mode='HTML')
    await update.message.reply_text(broadcast_text)

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å", callback_data="confirm_broadcast"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_broadcast")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å —ç—Ç–∏–º —Ç–µ–∫—Å—Ç–æ–º?",
        reply_markup=reply_markup
    )
    return BROADCAST_CONFIRM

async def send_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Sends the message to all users."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...")

    broadcast_text = context.user_data['broadcast_text']
    chat_ids = get_all_chat_ids()
    
    successful_sends = 0
    failed_sends = 0

    for chat_id in chat_ids:
        try:
            await context.bot.send_message(chat_id=chat_id, text=broadcast_text)
            successful_sends += 1
        except Exception as e:
            logger.error(f"Failed to send message to {chat_id}: {e}")
            failed_sends += 1
    
    await query.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful_sends}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_sends}"
    )
    context.user_data.clear()
    return ConversationHandler.END

async def cancel_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancels the broadcast conversation."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    context.user_data.clear()
    return ConversationHandler.END

def main():
    application = Application.builder().token(os.getenv('BOT_TOKEN')).build()

    # Conversation handlers
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('user', register_callback),
            CallbackQueryHandler(register_callback, pattern="^register$")
        ],
        states={
            REGISTERING: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_registration)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    lead_handler = ConversationHandler(
        entry_points=[
            CommandHandler('add', add_lead),
            MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–∏–¥–∞$"), add_lead)
        ],
        states={
            ADDING_LEAD: [CallbackQueryHandler(lead_callback)],
            LEAD_INFO: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_lead_info)],
            LEAD_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_lead_phone)],
            LEAD_PARENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_lead_parent)],
            LEAD_PARENT_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_lead_parent_phone)],
            LEAD_PARENT_PHONE2: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_lead_parent_phone2)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    broadcast_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_broadcast_callback, pattern="^start_broadcast$")],
        states={
            BROADCAST_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_broadcast_text)],
            BROADCAST_CONFIRM: [
                CallbackQueryHandler(send_broadcast, pattern="^confirm_broadcast$"),
                CallbackQueryHandler(cancel_broadcast, pattern="^cancel_broadcast$")
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel_broadcast)]
    )

    # Add handlers
    application.add_handler(conv_handler)
    application.add_handler(lead_handler)
    application.add_handler(broadcast_handler)

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("root", root))
    application.add_handler(MessageHandler(filters.Regex("^‚ÑπÔ∏è –û –∫–æ–Ω–∫—É—Ä—Å–µ$"), about))
    application.add_handler(MessageHandler(filters.Regex("^üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è$"), info))
    application.add_handler(MessageHandler(filters.Regex("^üë§ –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), stats))
    application.add_handler(CommandHandler("info", info))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CallbackQueryHandler(info_callback, pattern="^info_"))
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
